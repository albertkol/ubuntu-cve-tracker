# Standard library
import sys
import json

# Local
from lib.file_helpers import JsonStore, download_gzip_file
import cve_lib
import git 
import requests
from cvss import CVSS2, CVSS3

cve_data = None
download_gzip_file(
    url="http://archive.ubuntu.com/ubuntu/dists/bionic/main/source/Sources.gz",
    output_filename=".cache/main.txt",
    etag_store=JsonStore(".cache/etags.json"),
)
download_gzip_file(
    url="http://archive.ubuntu.com/ubuntu/dists/bionic/universe/source/Sources.gz",
    output_filename=".cache/universe.txt",
    etag_store=JsonStore(".cache/etags.json"),
)


if len(sys.argv) > 1:
    headers = {
        "Content-type": "application/json"
    }
    cve_filename = sys.argv[1]
    cve_data = cve_lib.load_cve(cve_filename)
    local_dir = sys.path[2]
    url = 'http://127.0.0.1:8001/security'
    g = git.Git(local_dir)


    references = cve_data["References"].split("\n")
    if references[0] == "":
        references.pop(0)

    cvss = None
    if "3." in cve_data["CVSS"][0][1]:
        # Use CVSS3
        c = CVSS3(cve_data["CVSS"][0][1])
        cvss = c.scores()[0]
    else:
        # Use CVSS2
        c = CVSS2(cve_data["CVSS"][0][1])
        cvss = c.scores()[0]

    packages = []
    for pkg in cve_data["pkgs"]:
        releases = []
        for [key, value] in cve_data["pkgs"][pkg].items():
            release = dict(
                name=key,
                status=value[0],
                status_description=value[1]
            )
            releases.append(release)
        package = dict(
            name=pkg,
            source="",
            ubuntu="",
            debian="",
            releases=releases
        )
        packages.append(package)

    
    cve = dict(
        id=cve_data["Candidate"],
        public_date=cve_data["PublicDate"],
        public_date_usn=cve_data["PublicDateAtUSN"] if "PublicDateAtUSN" in cve_data else None,
        last_updated_date="",
        crd = cve_data["CRD"] if "CRD" in cve_data else None,
        description = cve_data["Description"],
        ubuntu_description = cve_data["Ubuntu-Description"],
        notes = cve_data["Notes"],
        mitigation = cve_data["Mitigation"],
        priority = cve_data["Priority"],
        discovered_by = cve_data["Discovered-by"],
        assigned_to = cve_data["Assigned-to"],
        approved_by = cve_data["Approved-by"] if "Approved-by" in cve_data else None,
        cvss = cvss,  # CVSS vector to convert into Base score
        references = references,
        bugs = cve_data["Bugs"],
        packages = packages,
        status = "active"
    )


    response = requests.post(url, json=cve, headers=headers)
    print(response)

else:
    print("CVE file not found")