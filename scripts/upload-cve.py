# Standard library
import sys
import json
import os
import cve_lib
import git 
import requests
import re

# Local
from lib.file_helpers import JsonStore, download_gzip_file
from cvss import CVSS2, CVSS3
from os.path import isfile, join

cve_data = None
download_gzip_file(
    url="http://archive.ubuntu.com/ubuntu/dists/bionic/main/source/Sources.gz",
    output_filename=".cache/main.txt",
    etag_store=JsonStore(".cache/etags.json"),
)
download_gzip_file(
    url="http://archive.ubuntu.com/ubuntu/dists/bionic/universe/source/Sources.gz",
    output_filename=".cache/universe.txt",
    etag_store=JsonStore(".cache/etags.json"),
)

PORT = 5003
url = f'http://localhost:{PORT}/security/'

def post_single_cve(cve_filename):
    # Upload active and ignored (in Ubuntu)
    cve_data = cve_lib.load_cve(cve_filename)
    local_dir = sys.path[2]
    # Get latest commit date for last_updated CVE
    g = git.Git(local_dir)


    references = cve_data["References"].split("\n")
    if references[0] == "":
        references.pop(0)

    cvss = None
    if len(cve_data["CVSS"]) > 0:
        if "3." in cve_data["CVSS"][0][1]:
            # Use CVSS3
            c = CVSS3(cve_data["CVSS"][0][1])
            cvss = c.scores()[0]
        else:
            # Use CVSS2
            c = CVSS2(cve_data["CVSS"][0][1])
            cvss = c.scores()[0]

    packages = []
    for pkg in cve_data["pkgs"]:
        releases = []
        for [key, value] in cve_data["pkgs"][pkg].items():
            release = dict(
                name=key,
                status=value[0],
                status_description=value[1]
            )
            releases.append(release)
        package = dict(
            name=pkg,
            source=f"https://people.canonical.com/~ubuntu-security/cve/pkg/{key}.html",
            ubuntu=f"https://packages.ubuntu.com/search?suite=all&section=all&arch=any&searchon=sourcenames&keywords={key}",
            debian=f"https://tracker.debian.org/pkg/{key}",
            releases=releases
        )
        packages.append(package)

    
    cve = dict(
        id=cve_data["Candidate"],
        public_date=cve_data["PublicDate"],
        public_date_usn=cve_data["PublicDateAtUSN"] if "PublicDateAtUSN" in cve_data else None,
        last_updated_date=None,
        crd = cve_data["CRD"] if "CRD" in cve_data else None,
        description = cve_data["Description"],
        ubuntu_description = cve_data["Ubuntu-Description"],
        notes = cve_data["Notes"],
        mitigation = cve_data["Mitigation"] if "Mitigation" in cve_data else None,
        priority = cve_data["Priority"],
        discovered_by = cve_data["Discovered-by"],
        assigned_to = cve_data["Assigned-to"],
        approved_by = cve_data["Approved-by"] if "Approved-by" in cve_data else None,
        cvss = cvss,  # CVSS vector to convert into Base score
        references = references,
        bugs = cve_data["Bugs"],
        packages = packages,
        status = "rejected" if "** REJECT **" in cve_data["Description"] else "active"
    )

    return cve

if len(sys.argv) > 1:
    headers = {
        "Content-type": "application/json"
    }
    cve_filename = sys.argv[1]

    if cve_filename == "../active":
        

        list_cve_files = []
        cves = []
        for file in os.listdir(cve_filename):
            regex = re.compile('(cve-|CVE-)\\d{4}-\\d{4,7}')
            if re.match(regex, file):
                list_cve_files.append(file)

        # Use slice to get the number of CVEs to post
        # e.g. last 20
        list_cves = list_cve_files[-21:]
        for index in range(len(list_cves)):
            relative_path = f"{cve_filename}/{list_cves[index]}"
            cve = post_single_cve(relative_path)
            cves.append(cve)

        response = requests.post(f"{url}cve", json=cves, headers=headers)

    elif "not-for-us.txt" in cve_filename:
        # Upload not in Ubuntu
        # This has a bulk of CVEs, so we are just choosing 1 for now
        cve_id = cve_lib.parse_CVEs_from_uri(cve_filename)[0]
        mitre = f"https://cve.mitre.org/cgi-bin/cvename.cgi?name={cve_id}"
        notes = dict(
            author="ubuntu-security",
            comment="Does not apply to software found in Ubuntu."
        )
        cve = dict(
            id=cve_id,
            public_date=None,
            last_updated_date=None,
            notes = [notes],
            references = [mitre],
        )

        response = requests.post(url+cve_id, json=cve, headers=headers)
    else:
        cve = post_single_cve(cve_filename)
        response = requests.post(url+cve.id, json=cve, headers=headers)


    print(response.json())

else:
    print("CVE file not found")